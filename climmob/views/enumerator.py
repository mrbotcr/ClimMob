import re

from pyramid.httpexceptions import HTTPNotFound
import validators
from climmob.config.encdecdata import encodeData, decodeData
from climmob.processes import (
    searchEnumerator,
    enumeratorExists,
    addEnumerator,
    deleteEnumerator,
    modifyEnumerator,
    getActiveProject,
    getEnumeratorData,
)
from climmob.views.classes import privateView
import climmob.plugins as p
from pyramid.response import FileResponse
import pandas as pd
import numpy as np
import shutil
import os
import glob
import json


class getEnumeratorDetails_view(privateView):
    def processView(self):
        if self.request.method == "GET":
            userOwner = self.request.matchdict["user"]
            enumId = self.request.matchdict["enumid"]
            enumerator = getEnumeratorData(userOwner, enumId, self.request)
            self.returnRawViewResult = True
            for plugin in p.PluginImplementations(p.IEnumerator):
                enumerator = plugin.before_returning_context(self.request, enumerator)
            return enumerator
        raise HTTPNotFound


class enumerators_view(privateView):
    def processView(self):
        dataworking = {}
        error_summary = {}
        modify = False
        reportUpload = []

        nextPage = self.request.params.get("next")

        if self.request.method == "POST":

            dataworking = self.getPostDict()
            if "btn_add_enumerator" in self.request.POST:
                modify = False
                dataworking, error_summary = functionForAddFieldAgents(
                    dataworking, self, error_summary
                )

            if "btn_download_fieldagents_template" in self.request.POST:

                locale = self.request.locale_name
                pathOfClimMob = os.path.dirname(os.path.dirname(__file__))
                pathOfTemplatesForFieldAgents = os.path.join(
                    pathOfClimMob, *["products", "addfieldagents"]
                )

                try:
                    pathWithLocale = os.path.join(pathOfTemplatesForFieldAgents, locale)
                    theTemplateIsHere = glob.glob(pathWithLocale + "/*.xlsx")[0]
                except Exception as e:
                    pathWithLocale = os.path.join(pathOfTemplatesForFieldAgents, "en")
                    theTemplateIsHere = glob.glob(pathWithLocale + "/*.xlsx")[0]

                # Split and get the last position -> the filename
                filename = theTemplateIsHere.split("/")[-1]

                response = FileResponse(
                    theTemplateIsHere,
                    request=self.request,
                    content_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                )
                response.content_disposition = 'attachment; filename="' + filename + '"'
                self.returnRawViewResult = True
                return response

            if "btn_upload_field_agents" in self.request.POST:

                columnsInFile = []
                possibleColumns = [
                    "fullname",
                    "username",
                    "telephone",
                    "email",
                    "password",
                ]
                filePath = getTheFileInPOST(self.request, self.user.login)

                try:
                    data = pd.read_excel(filePath, sheet_name="Data")
                    data = data.replace(np.nan, "")

                    columnsInFile = list(data.columns)
                except:
                    dataReport = {}
                    dataReport["enum_id"] = "All"
                    dataReport["status"] = "401"
                    dataReport["message"] = self._(
                        "The Excel file used does not contain a sheet called Data. Please use the template generated by ClimMob in Field agents section."
                    )
                    reportUpload.append(dataReport)

                if not reportUpload:
                    if sorted(columnsInFile) != sorted(possibleColumns):
                        dataReport = {}
                        dataReport["enum_id"] = "All"
                        dataReport["status"] = "401"
                        dataReport["message"] = self._(
                            "The Excel file used does not contain the necessary formatting to be processed. Please use the template generated by ClimMob in Field agents section."
                        )
                        reportUpload.append(dataReport)

                    if not reportUpload:
                        for column in columnsInFile:
                            data[column] = data[column].astype(str)

                        listOfRecords = data.to_dict("records")

                        countLine = 2
                        for record in listOfRecords:
                            dataReport = {}
                            dataworking = {}
                            dataworking["enum_id"] = record["username"]
                            dataworking["enum_name"] = record["fullname"]
                            dataworking["enum_password"] = record["password"]
                            dataworking["enum_email"] = record["email"]
                            dataworking["enum_telephone"] = record["telephone"]

                            dataworking, error_upload = functionForAddFieldAgents(
                                dataworking, self, error_summary, showMessage=False
                            )

                            dataReport["line_number"] = countLine
                            dataReport["enum_id"] = record["username"]
                            if not error_upload:
                                dataReport["status"] = 200
                                dataReport["message"] = self._(
                                    "The field agent was created successfully."
                                )
                            else:
                                dataReport["status"] = 401
                                dataReport["message"] = error_upload["error"]
                            reportUpload.append(dataReport)

                            countLine += 1
                            dataworking = {}

            if "btn_modify_enumerator" in self.request.POST:
                modify = True
                enumeratorid = dataworking["enum_id"]
                dataworking["enum_password"] = encodeData(
                    self.request, dataworking["enum_password"]
                )
                if "ckb_modify_status" in dataworking.keys():
                    if dataworking["ckb_modify_status"] == "on":
                        dataworking["enum_active"] = 1
                    else:
                        dataworking["enum_active"] = 0
                    dataworking.pop("ckb_modify_status")
                else:
                    dataworking["enum_active"] = 0

                if (
                    validators.email(dataworking["enum_email"])
                    and re.match(r"^[A-Za-z0-9._@-]+$", dataworking["enum_email"])
                    or dataworking["enum_email"] == ""
                ):
                    continue_update = True
                    message = ""
                    for plugin in p.PluginImplementations(p.IEnumerator):
                        if continue_update:
                            (
                                continue_update,
                                message,
                            ) = plugin.before_updating_enumerator(
                                self.request, self.user.login, enumeratorid, dataworking
                            )
                    if continue_update:
                        mdf, message = modifyEnumerator(
                            self.user.login, enumeratorid, dataworking, self.request
                        )
                        if not mdf:
                            error_summary = {"dberror": message}
                        else:
                            for plugin in p.PluginImplementations(p.IEnumerator):
                                plugin.after_updating_enumerator(
                                    self.request,
                                    self.user.login,
                                    enumeratorid,
                                    dataworking,
                                )
                            dataworking = {}
                            self.request.session.flash(
                                self._("The field agent was modified successfully.")
                            )
                            modify = False
                    else:
                        error_summary = {"dberror": message}

                else:
                    error_summary = {"error": self._("The email is invalid.")}

                if error_summary:
                    dataworking["enum_password"] = decodeData(
                        self.request, dataworking["enum_password"]
                    ).decode("utf-8")

        return {
            "activeUser": self.user,
            "activeProject": getActiveProject(self.user.login, self.request),
            "searchEnumerator": searchEnumerator(self.user.login, self.request),
            "dataworking": dataworking,
            "error_summary": error_summary,
            "reportUpload": reportUpload,
            "modify": modify,
            "nextPage": nextPage,
            "sectionActive": "fieldagents",
        }


def functionForAddFieldAgents(dataworking, self, error_summary, showMessage=True):

    if dataworking["enum_id"] != "":

        reg = re.compile(r"^[A-Za-z0-9]+$")
        if reg.match(dataworking["enum_id"]):

            if not enumeratorExists(
                self.user.login, dataworking["enum_id"], self.request
            ):

                if dataworking["enum_name"] != "":

                    if dataworking["enum_password"] != "":

                        if (
                            validators.email(dataworking["enum_email"])
                            and re.match(
                                r"^[A-Za-z0-9._@-]+$", dataworking["enum_email"]
                            )
                            or dataworking["enum_email"] == ""
                        ):
                            continue_add = True
                            message = ""
                            for plugin in p.PluginImplementations(p.IEnumerator):
                                if continue_add:
                                    (
                                        continue_add,
                                        message,
                                    ) = plugin.before_adding_enumerator(
                                        self.request, self.user.login, dataworking
                                    )
                            if continue_add:
                                added, message = addEnumerator(
                                    self.user.login, dataworking, self.request
                                )
                                if not added:
                                    error_summary = {"error": message}
                                else:
                                    for plugin in p.PluginImplementations(
                                        p.IEnumerator
                                    ):
                                        plugin.after_adding_enumerator(
                                            self.request, self.user.login, dataworking
                                        )
                                    dataworking = {}
                                    if showMessage:
                                        self.request.session.flash(
                                            self._(
                                                "The field agent was created successfully."
                                            )
                                        )
                            else:
                                error_summary = {"error": message}
                        else:
                            error_summary = {"error": self._("The email is invalid.")}
                    else:
                        error_summary = {"error": self._("Password is required")}
                else:
                    error_summary = {"error": self._("Full name is required")}
            else:
                error_summary = {
                    "error": self._("This field agent username already exists.")
                }
        else:
            error_summary = {
                "error": self._(
                    "The username can only use lowercase letters and numbers."
                )
            }
    else:
        error_summary = {"error": self._("Username is required")}

    return dataworking, error_summary


def getTheFileInPOST(request, userInLogin):
    pathOfTheUser = os.path.join(
        request.registry.settings["user.repository"],
        *[userInLogin, "data", "addFieldAgents"]
    )
    if not os.path.exists(pathOfTheUser):
        os.makedirs(pathOfTheUser)

    input_file = request.POST["xlsxFieldAgents"].file
    file_name = request.POST["xlsxFieldAgents"].filename

    filePath = pathOfTheUser + "/" + file_name

    input_file.seek(0)
    with open(filePath, "wb") as permanent_file:
        shutil.copyfileobj(input_file, permanent_file)

    return filePath


class deleteEnumerator_view(privateView):
    def processView(self):
        enumeratorid = self.request.matchdict["enumeratorid"]

        if self.request.method == "POST":
            continue_delete = True
            message = ""
            for plugin in p.PluginImplementations(p.IEnumerator):
                if continue_delete:
                    continue_delete, message = plugin.before_deleting_enumerator(
                        self.request, self.user.login, enumeratorid
                    )
            if continue_delete:
                deleted, message = deleteEnumerator(
                    self.user.login, enumeratorid, self.request
                )
                if not deleted:
                    self.returnRawViewResult = True
                    return {"status": 400, "error": message}
                else:
                    for plugin in p.PluginImplementations(p.IEnumerator):
                        plugin.after_deleting_enumerator(
                            self.request, self.user.login, enumeratorid
                        )
                    self.request.session.flash(
                        self._("The field agent was successfully removed")
                    )
                    self.returnRawViewResult = True
                    return {"status": 200}
            else:
                self.returnRawViewResult = True
                return {"status": 400, "error": message}
